{"version":3,"sources":["components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/App.js","index.js"],"names":["Statistics","props","good","neutral","bad","total","positivePercentage","Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","item","onClick","type","Notification","message","App","state","handleIncrease","setState","prevState","countTotal","countPositivePercent","Math","round","feedback","this","Component","ReactDOM","render","React","createElement","document","getElementById"],"mappings":"kOAuBeA,EApBI,SAACC,GAClB,OACE,gCACE,uCAAS,+BAAOA,EAAMC,UACtB,0CAAY,+BAAOD,EAAME,aACzB,sCAAQ,+BAAOF,EAAMG,SACrB,wCAAU,+BAAOH,EAAMI,WACvB,oDAAsB,+BAAOJ,EAAMK,4BCM1BC,EAbC,SAACN,GACf,OACE,oCACE,6BAAKA,EAAMO,QACVP,EAAMQ,aCYEC,EAhBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAmBC,QAAS,kBAAMH,EAAgBE,IAAOE,KAAK,SAA9D,SACGF,GADUA,SCING,EARM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAO,6BAAKA,KCCRC,E,4MACJC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPiB,eAAiB,SAACL,GAChB,EAAKM,UAAS,SAACC,GAAD,sBACXP,EAAOO,EAAUP,GAAQ,O,EAI9BQ,WAAa,kBAAM,EAAKJ,MAAMlB,KAAO,EAAKkB,MAAMhB,IAAM,EAAKgB,MAAMjB,S,EAEjEsB,qBAAuB,2BAClBC,KAAKC,MAAO,EAAKP,MAAMlB,KAAO,EAAKsB,aAAgB,MAAQ,EADzC,M,EAGvBI,SAAW,WACT,OAA2B,IAApB,EAAKR,MAAMlB,MAAqC,IAAvB,EAAKkB,MAAMjB,SAAoC,IAAnB,EAAKiB,MAAMhB,K,4CAGzE,WACE,OACE,qCACE,cAAC,EAAD,CAASI,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBiB,KAAKR,mBAG1B,cAAC,EAAD,CAASb,MAAM,aAAf,SACGqB,KAAKD,WAAc,cAAC,EAAD,CAAcV,QAAQ,yBACxC,cAAC,EAAD,CACEhB,KAAQ2B,KAAKT,MAAMlB,KACnBC,QAAW0B,KAAKT,MAAMjB,QACtBC,IAAOyB,KAAKT,MAAMhB,IAClBC,MAASwB,KAAKL,aACdlB,mBAAsBuB,KAAKJ,kC,GAtCvBK,aA+CHX,IChDfY,IAASC,OAAOC,IAAMC,cAAcf,GAAMgB,SAASC,eAAe,W","file":"static/js/main.2b2e0a85.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = (props) => {\r\n  return (\r\n    <div>\r\n      <p>Good: <span>{props.good}</span></p>\r\n      <p>Neutral: <span>{props.neutral}</span></p>\r\n      <p>Bad: <span>{props.bad}</span></p>\r\n      <p>Total: <span>{props.total}</span></p>\r\n      <p>Positive feedback: <span>{props.positivePercentage}</span></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  total: PropTypes.number.isRequired,\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Statistics;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = (props) => {\r\n  return (\r\n    <section>\r\n      <h2>{props.title}</h2>\r\n      {props.children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.object.isRequired,\r\n};\r\nexport default Section;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div>\r\n      {options.map((item) => (\r\n        <button key={item} onClick={() => onLeaveFeedback(item)} type=\"button\">\r\n          {item}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n}\r\nexport default FeedbackOptions;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({message}) => {\r\n  return <h2>{message}</h2>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import React, { Component } from \"react\";\r\nimport Statistics from \"./Statistics/Statistics.jsx\";\r\nimport Section from \"./Section/Section.jsx\";\r\nimport FeedbackOptions from \"./FeedbackOptions/FeedbackOptions\";\r\nimport Notification from \"./Notification/Notification\";\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleIncrease = (type) => {\r\n    this.setState((prevState) => ({\r\n      [type]: prevState[type] + 1,\r\n    }));\r\n  };\r\n\r\n  countTotal = () => this.state.good + this.state.bad + this.state.neutral;\r\n\r\n  countPositivePercent = () =>\r\n    `${Math.round((this.state.good / this.countTotal()) * 100) || 0}%`;\r\n\r\n  feedback = () => {\r\n    return this.state.good === 0 && this.state.neutral === 0 && this.state.bad === 0\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={[\"good\", \"neutral\", \"bad\"]}\r\n            onLeaveFeedback={this.handleIncrease}\r\n          />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {this.feedback() ? (<Notification message=\"There is no feedback\" />) : (\r\n            <Statistics\r\n              good = {this.state.good}\r\n              neutral = {this.state.neutral}\r\n              bad = {this.state.bad}\r\n              total = {this.countTotal()}\r\n              positivePercentage = {this.countPositivePercent()}\r\n            />\r\n          )}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/App\"\r\n\r\nReactDOM.render(React.createElement(App), document.getElementById('root'));"],"sourceRoot":""}